{"version":3,"sources":["HallOfFame.js","HighScoreInput.js","Card.js","GuessCount.js","App.js","serviceWorker.js","index.js"],"names":["HallOfFame","entries","className","map","date","guesses","id","player","key","saveHOFEntry","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","HighScoreInput","state","winner","handleWinnerUpdate","event","setState","target","value","toUpperCase","persistWinner","preventDefault","props","type","autoComplete","this","onChange","onSubmit","Component","Card","card","feedback","index","onClick","GuessCount","protoTypes","PropTypes","number","isRequired","App","cards","generateCards","currentPair","hallOfFame","matchedCardIndices","handleCardClick","handleNewPairClosedBy","displayHallOfFame","result","candidates","shuffle","SIDE","pop","newPair","newGuesses","matched","setTimeout","indexMatched","includes","won","getFeedbackForCards","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d96ebfa.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\nimport React from 'react'\r\n\r\nimport './HallOfFame.css'\r\n\r\nconst HallOfFame = ({ entries }) => (\r\n  <table className=\"hallOfFame\">\r\n    <tbody>\r\n      {entries.map(({ date, guesses, id, player }) => (\r\n        <tr key={id}>\r\n          <td className=\"date\">{date}</td>\r\n          <td className=\"guesses\">{guesses}</td>\r\n          <td className=\"player\">{player}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nHallOfFame.propTypes = {\r\n  entries: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      date: PropTypes.string.isRequired,\r\n      guesses: PropTypes.number.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      player: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n}\r\n\r\nexport default HallOfFame\r\n\r\n// == Internal helpers ==============================================\r\n\r\nexport const FAKE_HOF = [\r\n  { id: 3, guesses: 18, date: '10/10/2017', player: 'Jane' },\r\n  { id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin' },\r\n  { id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa' },\r\n  { id: 0, guesses: 48, date: '14/10/2017', player: 'Marc' },\r\n]\r\n\r\nconst HOF_KEY = '::Memory::HallofFame'\r\nconst HOF_MAX_SIZE = 10\r\n\r\nexport function saveHOFEntry(entry, onStored) {\r\n  entry.date = new Date().toLocaleDateString()\r\n  entry.id = Date.now()\r\n\r\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\r\n  const insertionPoint = entries.findIndex(\r\n    ({ guesses }) => guesses >= entry.guesses\r\n  )\r\n\r\n  if (insertionPoint === -1) {\r\n    entries.push(entry)\r\n  } else {\r\n    entries.splice(insertionPoint, 0, entry)\r\n  }\r\n  if (entries.length > HOF_MAX_SIZE) {\r\n    entries.splice(HOF_MAX_SIZE, entries.length)\r\n  }\r\n\r\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries))\r\n  onStored(entries)\r\n}","import PropTypes from 'prop-types'\r\nimport React, { Component } from 'react'\r\n\r\nimport './HighScoreInput.css'\r\n\r\nimport { saveHOFEntry } from './HallOfFame'\r\n\r\nclass HighScoreInput extends Component {\r\n    state = { winner: '' }\r\n\r\n    handleWinnerUpdate = (event) => {\r\n        this.setState({ winner: event.target.value.toUpperCase() })\r\n      }\r\n\r\n      // Arrow fx for binding\r\n    persistWinner = (event) => {\r\n        event.preventDefault()\r\n        const newEntry = { guesses: this.props.guesses, player: this.state.winner }\r\n        saveHOFEntry(newEntry, this.props.onStored)\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"highScoreInput\">\r\n        <p>\r\n          <label>\r\n            Bravo ! Entre ton prénom :\r\n            <input \r\n                type=\"text\" \r\n                autoComplete=\"given-name\" \r\n                value={this.state.winner} \r\n                onChange={this.handleWinnerUpdate} \r\n                />\r\n          </label>\r\n          <button \r\n            type=\"submit\" \r\n            onSubmit={this.persistWinner}>\r\n                J’ai gagné !\r\n                </button>\r\n        </p>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nHighScoreInput.propTypes = {\r\n  guesses: PropTypes.number.isRequired,\r\n  onStored: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default HighScoreInput","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Card.css'\r\n\r\nconst HIDDEN_SYMBOL = '❓'\r\n\r\nconst Card = ({ card, feedback, index, onClick }) => (\r\n    <div className={`card ${feedback}`} onClick={() => onClick(index)}>\r\n      <span className=\"symbol\">\r\n        {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\r\n      </span>\r\n    </div>\r\n  )\r\n\r\nCard.propTypes = {\r\n  card: PropTypes.string.isRequired,\r\n  feedback: PropTypes.oneOf([\r\n    'hidden',\r\n    'justMatched',\r\n    'justMismatched',\r\n    'visible'\r\n  ]).isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n}\r\n\r\n  export default Card\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './GuessCount.css'\r\n\r\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{guesses}</div>\r\n\r\nGuessCount.protoTypes = {\r\n    guesses: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default GuessCount","import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\nimport HallOfFame, {FAKE_HOF} from './HallOfFame'\nimport './App.css'\n\nimport HighScoreInput from './HighScoreInput'\nimport Card from './Card'\nimport GuessCount from './GuessCount'\n\nconst SIDE = 6\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\nconst VISUAL_PAUSE_MSECS = 750\n\nclass App extends Component {\n\n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    hallOfFame: null,\n    matchedCardIndices: [],\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n    this.handleNewPairClosedBy(index)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n\n  getFeedbackForCards(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n\n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  // Arrow fx for binding\n  displayHallOfFame = (hallOfFame) => {\n    this.setState({ hallOfFame })\n  }\n\n  render() {\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state\n    const won = matchedCardIndices.length === 4\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n          {cards.map((card, index) => (\n            <Card\n              card={card}\n              feedback={this.getFeedbackForCards(index)}\n              index={index}\n              key={index}\n              onClick={this.handleCardClick}\n            />\n          ))}\n        {\n          won &&\n            (hallOfFame ? (\n              <HallOfFame entries={hallOfFame} />\n            ) : (\n              <HighScoreInput guesses={guesses} onStored={this.displayHallOfFame} />\n            ))\n        }\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}